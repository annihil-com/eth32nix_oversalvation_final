// ETH32nix - an Enemy Territory cheat for Linux
// Copyright (c) 2009 eth32 team
// www.nixcoders.org

#pragma once
#define MAX_SETTING_VALUES	31

typedef enum {
	SETTING_INT,
	SETTING_FLOAT,
	SETTING_BOOL,
	SETTING_VEC3,
	SETTING_VEC4,
	SETTING_BYTE3,
	SETTING_STRING,
	MAX_SETTINGS
} settingtype_t;

typedef struct settingvalue_s {
	float value;
	const char *text;
} settingvalue_t;

typedef struct settingdef_s {
	const char *name;
	const char *defaultValue;
	settingtype_t type;
	void *target;
	const char *description;
	float min, max;
	settingvalue_t values[MAX_SETTING_VALUES];
} settingdef_t;

const static settingdef_t settingsDefs[] =
{
	// Name				Default			Type			Target
	//	Description
	//	Min / Max
	//		Value				TextValue
	/** *******************************************************************
					AIMBOT
	******************************************************************* **/
	{ "aimmode",			"2",			SETTING_INT,		(void*)&eth32.settings.aimMode,
		"master aimbot mode",
		AIMMODE_OFF, AIMMODE_MAX-1,
		{
			{ (int)AIMMODE_OFF,		"off" },
			{ (int)AIMMODE_NORMAL,	"normal" },
			{ (int)AIMMODE_HUMAN, 	"human" },
		},
	},
	{ "aimtype",			"1",			SETTING_INT,		(void*)&eth32.settings.aimType,
		"determines when the aimbot will activate",
		AIM_OFF, AIM_MAX-1,
		{
			{ (int)AIM_OFF,			"off" },
			{ (int)AIM_ON_FIRE,		"onfire" },
			{ (int)AIM_ON_BUTTON, 	"onbutton" },
			{ (int)AIM_ALWAYS,		"always" },
			{ (int)AIM_TRIGGER,		"trigger" },
		},
	},
	{ "autofire",			"false",			SETTING_BOOL,		(void*)&eth32.settings.autofire,
		"aimbot will fire for you when target available\n   (autofire must be turned on per weapon aswell)",
	},
	{ "atkvalid",			"false",		SETTING_BOOL,		(void*)&eth32.settings.atkValidate,
		"inhibits firing, even manually, until a valid target is visible",
	},
	{ "locktarget",			"false",		SETTING_BOOL,		(void*)&eth32.settings.lockTarget,
		"once a target is aquired, aimbot will stay on this target while it remains visible",
	},
	{ "fov",			"4.90",			SETTING_FLOAT,		(void*)&eth32.settings.fov,
		"set the field of vision that the aimbot can select targets from",
		0, 360,
	},
	{ "aimsort",			"1",			SETTING_INT,		(void*)&eth32.settings.aimSort,
		"sets type of sort to be used with valid targets",
		SORT_OFF, SORT_MAX-1,
		{
			{ (int)SORT_OFF,		"off" },
			{ (int)SORT_CROSSHAIR,	"crosshair" },
			{ (int)SORT_DISTANCE,	"distance" },
			{ (int)SORT_ATTACKER,  	"attacker" },
			{ (int)SORT_KDRATIO,	"kdratio" },
			{ (int)SORT_ACCURACY,	"accuracy" },
			{ (int)SORT_THREAT,		"threat" },
		},
	},
	{ "headbody",		"3",			SETTING_INT,		(void*)&eth32.settings.headbody,
		"determines if the aimbot uses the head or body and which order",
		0, AP_MAX-1,
		{
			{ (int)BODY_ONLY,		"bodyonly" },
			{ (int)HEAD_ONLY,		"headonly" },
			{ (int)BODY_HEAD,		"bodyfirst" },
			{ (int)HEAD_BODY,		"headfirst" },
			{ (int)HEAD_PRIORITY,	"headpriority" },
		},
	},
	{ "headtracetype",		"0",			SETTING_INT,		(void*)&eth32.settings.headTraceType,
		"set the style of trace used to determine if a target is visible",
		0, HEAD_MAX-1,
		{
			{ (int)HEAD_CENTER,		"center" },
			{ (int)HEAD_STATIC,		"static" },
			{ (int)HEAD_XTRACE,		"xtrace" },
		},
	},
	{ "bodytracetype",			"1",			SETTING_INT,		(void*)&eth32.settings.bodyTraceType,
		"set the style of trace used to determine if a target is visible",
		0, BODY_MAX-1,
		{
			{ (int)BODY_CENTER,			"center" },
			{ (int)BODY_CONTOUR,		"contour" },
			{ (int)BODY_STATIC,			"static" },
			{ (int)BODY_XTRACE,			"xtrace" },
			{ (int)BODY_RANDOM_VOLUME,	"randvolume" },
			{ (int)BODY_RANDOM_SURFACE,	"randsurface" },
            { (int)BODY_CAPSULE_VOLUME,	"capvolume" },
            { (int)BODY_CAPSULE_SURFACE,"capsurface" },
		},
	},
	{ "dynamichitbox",		"1,2",			SETTING_FLOAT,		(void*)&eth32.settings.dynamicHitboxScale,
		"set how much a hitbox will scale based on player movement",
		0, 3,
	},
	{ "animcor", 			"1.000", 		SETTING_FLOAT, 		(void*)&eth32.settings.animCorrection,
		"animation correction for aimbot",
		-10, 10,
	},
	{ "autocrouch",			"false",			SETTING_BOOL,		(void*)&eth32.settings.autoCrouch,
		"enable auto crouching when target is visible",
	},
	{ "valgrentrajectory", 		"true",			SETTING_BOOL, 		(void*)&eth32.settings.valGrenTrajectory,
		"make additional calculations to make sure the grenade doesn't hit anything",
	},
	{ "valrifletrajectory", 	"true",			SETTING_BOOL, 		(void*)&eth32.settings.valRifleTrajectory,
		"make additional calculations to make sure the riflegrenade doesn't hit anything",
	},
	{ "grenadetracer", 		"true",			SETTING_BOOL,		(void*)&eth32.settings.grenadeTracer,
		"shows trajectory of the grenade",
	},
	{ "rifletracer", 		"true",			SETTING_BOOL,		(void*)&eth32.settings.rifleTracer,
		"shows trajectory of the rifle grenade",
	},
	{ "humanAimMode",	"0",			SETTING_INT,		(void*)&eth32.settings.humanAimType,
		"type of human aim to do",
		HUMAN_AIM_LUCKY, HUMAN_AIM_MAX-1,
		{
			{ (int)HUMAN_AIM_LUCKY,		"lucky" },
			{ (int)HUMAN_AIM_FULL, 		"full" },
		},
	},
	{ "humanvalue",	"0.600",			SETTING_FLOAT,		(void*)&eth32.settings.humanValue,
		"human aim value",
		0, 1,
	},
	{ "divmin",	"1",					SETTING_FLOAT,		(void*)&eth32.settings.divMin,
		"div min human aim value",
		0, 10,
	},
	{ "divmax",	"2",					SETTING_FLOAT,		(void*)&eth32.settings.divMax,
		"div max human aim value",
		0, 10,
	},
	{ "locksensitivity", "true",		SETTING_BOOL,		(void*)&eth32.settings.lockSensitivity,
		"enable disable lockSensitivity",
	},
	{ "aimprotect",		"0",			SETTING_INT,		(void*)&eth32.settings.aimprotect,
		"turn off aimbot when people are watching",
		0, PROTECT_MAX-1,
		{
			{ (int)PROTECT_OFF,		"off" },
			{ (int)PROTECT_SPECS,	"specs" },
			{ (int)PROTECT_ALL,		"all" },
		},
	},
	{ "lockMouse",			"false",		SETTING_BOOL,		(void*)&eth32.settings.lockMouse,
		 "Lock mouse while aiming",
	},

	/** *******************************************************************
					AIMBOT EXTRA
	******************************************************************* **/
	{ "headsize",	   		"10",	    		SETTING_FLOAT,		(void*)&eth32.settings.headBoxSize,
		"head hitbox size",
		1, 15,
	},
	{ "bodysize",			"27.5",			SETTING_FLOAT,		(void*)&eth32.settings.bodybox,
		"body hitbox size",
		0, 40,
	},
	{ "hitboxtype",			"1",			SETTING_INT,		(void*)&eth32.settings.hitboxType,
		"set the hitbox style to use for aimbot",
		HITBOX_OFF, HITBOX_MAX-1,
		{
			{ (int)HITBOX_OFF,		"off" },
			{ (int)HITBOX_ETPRO,	"etpro" },
			{ (int)HITBOX_CUSTOM,	"custom" },
		},
	},
	{ "preshoot",			"false",			SETTING_BOOL,		(void*)&eth32.settings.preShoot,
		"pre-shoot at targets before they are logically visible",
	},
	{ "preaim",			"false",			SETTING_BOOL,		(void*)&eth32.settings.preAim,
		"preaim targets",
	},
	{ "preshoottime",		"50",			SETTING_FLOAT,		(void*)&eth32.settings.preShootTime,
		"preshoot time - higher means earlier shot (and higher chance of miss)",
		0, 300,
	},
	{ "preaimtime",			"60",			SETTING_FLOAT,		(void*)&eth32.settings.preAimTime,
		"preaim time - higher is earlier aiming",
		0, 300,
	},
	{ "predtarget",		"true",		SETTING_BOOL,		(void*)&eth32.settings.predTarget,
		"target predict",
	},
	{ "predself",			"0.005",		SETTING_FLOAT,		(void*)&eth32.settings.predSelf,
		"set amount to prediction to applied to our own movement)",
		-0.1, 0.1,
	},
	{ "autocorrection",		"true",			SETTING_BOOL,		(void*)&eth32.settings.autocorrections,
		"enable correction",
	},
	{ "corrrange",			"10000",		SETTING_FLOAT,		(void*)&eth32.settings.RangE,
		"maximum distance for auto corrections",
		0, 10000,
	},
	{ "Spread",			"600",		SETTING_FLOAT,		(void*)&eth32.settings.spread,
		"Spread value",
		0, 1000,
	},
	{ "standclosex",		"0.495",		SETTING_FLOAT,		(void*)&eth32.settings.vecstandcloseX,
		"correction amount for X vec, close range (standing and running)",
		-10.0, 10.0,
	},
	{ "standfarx",			"0.125",		SETTING_FLOAT,		(void*)&eth32.settings.vecstandfarX,
		"correction amount for X vec, far range (standing and running)",
		-10.0, 10.0,
	},
	{ "crouchclosex",		"0.370",		SETTING_FLOAT,		(void*)&eth32.settings.veccrouchcloseX,
		"correction amount for X vec, close range (crouching and crawling)",
		-10.0, 10.0,
	},
	{ "crouchfarx",			"1.480",		SETTING_FLOAT,		(void*)&eth32.settings.veccrouchfarX,
		"correction amount for X vec, far range (crouching and crawling)",
		-10.0, 10.0,
	},

	{ "standclosey",		"-0.125",		SETTING_FLOAT,		(void*)&eth32.settings.vecstandcloseY,
		"correction amount for Y vec, close range (standing and running)",
		-10.0, 10.0,
	},
	{ "standfary",			"-0.125",		SETTING_FLOAT,		(void*)&eth32.settings.vecstandfarY,
		"correction amount for Y vec, far range (standing and running)",
		-10.0, 10.0,
	},
	{ "crouchclosey",		"0.125",		SETTING_FLOAT,		(void*)&eth32.settings.veccrouchcloseY,
		"correction amount for Y vec, close range (crouching and crawling)",
		-10.0, 10.0,
	},
	{ "crouchfary",			"-0.245",		SETTING_FLOAT,		(void*)&eth32.settings.veccrouchfarY,
		"correction amount for Y vec, close range (crouching and crawling)",
		-10.0, 10.0,
	},
	{ "standclosez",		"6.666",		SETTING_FLOAT,		(void*)&eth32.settings.vecstandcloseZ,
		"correction amount for Z vec, close range (standing and running)",
		-10.0, 10.0,
	},
	{ "standfarz",			"1.000",		SETTING_FLOAT,		(void*)&eth32.settings.vecstandfarZ,
		"correction amount for Z vec, far range (standing and running)",
		-10.0, 10.0,
	},
	{ "crouchclosez",		"6.540",		SETTING_FLOAT,		(void*)&eth32.settings.veccrouchcloseZ,
		"correction amount for Z vec, close range (crouching and crawling)",
		-10.0, 10.0,
	},
	{ "crouchfarz",			"1.000",		SETTING_FLOAT,		(void*)&eth32.settings.veccrouchfarZ,
		"correction amount for Z vec, far range (crouching and crawling)",
		-10.0, 10.0,
	},
	{ "proneclosex",		"0.535",		SETTING_FLOAT,		(void*)&eth32.settings.vecpronecloseX,
		"correction amount for X vec, close range (prone)",
		-10.0, 10.0,
	},
	{ "pronefarx",			"0.535",		SETTING_FLOAT,		(void*)&eth32.settings.vecpronefarX,
		"correction amount for X vec, far range (prone)",
		-10.0, 10.0,
	},
	{ "proneclosey",		"0.000",		SETTING_FLOAT,		(void*)&eth32.settings.vecpronecloseY,
		"correction amount for Y vec, close range (prone)",
		-10.0, 10.0,
	},
	{ "pronefary",			"0.000",		SETTING_FLOAT,		(void*)&eth32.settings.vecpronefarY,
		"correction amount for Y vec, far range (prone)",
		-10.0, 10.0,
	},
	{ "proneclosez",		"6.520",		SETTING_FLOAT,		(void*)&eth32.settings.vecpronecloseZ,
		"correction amount for Z vec, close range (prone)",
		-10.0, 10.0,
	},
	{ "pronefarz",			"6.520",		SETTING_FLOAT,		(void*)&eth32.settings.vecpronefarZ,
		"correction amount for Z vec, far range (prone)",
		-10.0, 10.0,
	},
	{ "headhitboxfar",	   	"1",	    		SETTING_FLOAT,		(void*)&eth32.settings.farBoxSize,
		"head hitbox size (far distance)",
		0, 20,
	},
	{ "headhitboxclose",	   	"11.000",	    	SETTING_FLOAT,		(void*)&eth32.settings.closeBoxSize,
		"head hitbox size (close distance)",
		0, 20,
	},
	{ "delayclose",	   		"9",	   		SETTING_FLOAT,		(void*)&eth32.settings.delayclose,
		"weapon shooting delay in close distance",
		0, 500,
	},
	{ "delayfar",	   		"15",	   		SETTING_FLOAT,		(void*)&eth32.settings.delayfar,
		"weapon shooting delay in far distance",
		0, 500,
	},
	{ "pointsclose",	   	"100",	   	SETTING_FLOAT,		(void*)&eth32.settings.pointsclose,
		"max autopoints in close distance",
		0, 100,
	},
	{ "pointsfar",	   		"1",	    		SETTING_FLOAT,		(void*)&eth32.settings.pointsfar,
		"max autopoints in far distance",
		0, 100,
	},
	
	/** *******************************************************************
					VISUALS
	******************************************************************* **/
	{ "orighud", 		"false", 		SETTING_BOOL, 		(void*)&eth32.settings.guiOriginal,
		"use the original ET hud",
	},
	{ "hackvisuals", 		"true", 		SETTING_BOOL, 		(void*)&eth32.settings.drawHackVisuals,
		"draw hack visuals",
	},
	{ "wallhack",			"false",			SETTING_BOOL,		(void*)&eth32.settings.wallhack,
		"view players and items through walls",
	},
	{ "blackout",		"true",		SETTING_BOOL,		(void*)&eth32.settings.blackout,
		"display the blackout around scoped weapons",
	},
	{ "weapzoom",			"true",		SETTING_BOOL,		(void*)&eth32.settings.weaponZoom,
		"toggle weapon zoom for scoped weapons",
	},
	{ "scopedspeed",		"1.0",			SETTING_FLOAT,		(void*)&eth32.settings.scopedTurnSpeed,
		"determines turning speed while scoped, (normal unscoped speed = 1.0)",
		0.1, 1.0,
	},
	{ "smoketransp",		"0",			SETTING_INT,		(void*)&eth32.settings.smoketrnsp,
		"set the transparency of smoke",
		0,	100,
	},
	{ "bannerscale", 		"1",			SETTING_FLOAT, 		(void*)&eth32.settings.BannerScale,
		"Banner font scale",
		0, 3,
	},
	{ "gui_banner", 		"false", 		SETTING_BOOL, 		(void*)&eth32.settings.guiBanner,
		"GUI: show stats banner",
	},
	{ "bannerfmt", 			"^2[N] ^0- ^3Name: ^2[n] ^0- ^3Ping: ^2[P] &&^3Kills: ^2[k] ^0- ^3Deaths: ^2[d] ^0- ^3Spree: ^2[S] &&^3Headshots: ^2[/] ^0- ^3Accuracy: ^2[\\]^3% ^0- ^3Hs/Kill: ^2[<]", SETTING_STRING, (void*)eth32.settings.BannerFmt,
		"banner format",
	},
	{ "removefoliage",		"true",			SETTING_BOOL,		(void*)&eth32.settings.removeFoliage,
		"remove completely the foliage",
	},
	{ "removeparticles",		"true",			SETTING_BOOL,		(void*)&eth32.settings.removeParticles,
		"remove smoke particles when hitting other players",
	},
	{ "headhitbox",			"false",		SETTING_BOOL,		(void*)&eth32.settings.drawHeadHitbox,
		"enable head hitbox drawing",
	},
	{ "headaxes",			"false",		SETTING_BOOL,		(void*)&eth32.settings.drawHeadAxes,
		"enable hitbox axis drawing",
	},
	{ "bodyhitbox",			"false",		SETTING_BOOL,		(void*)&eth32.settings.drawBodyHitbox,
		"enable body hitbox drawing",
	},
	{ "debugpoints",		"false",		SETTING_BOOL,		(void*)&eth32.settings.debugPoints,
		"enable drawing of generated aimpoints",
	},
	{ "bulletrail",			"false",		SETTING_BOOL,		(void*)&eth32.settings.drawBulletRail,
		"enable bullet tracers",
	},
	{ "railwallhack",		"false",			SETTING_BOOL,		(void*)&eth32.settings.railWallhack,
		"see hitboxes and bullet tracers through walls",
	},
	{ "headhbtime",			"40",			SETTING_INT,		(void*)&eth32.settings.headRailTime,
		"set head hitbox stay time (in msec)",
		0, 1000,
	},
	{ "bodyhbtime",			"40",			SETTING_INT,		(void*)&eth32.settings.bodyRailTime,
		"set body hitbox stay time (in msec)",
		0, 1000,
	},
	{ "espname",			"true",			SETTING_BOOL,		(void*)&eth32.settings.espName,
		"display player names above their heads",
	},
	{ "grenadedlight",		"false",			SETTING_BOOL,		(void*)&eth32.settings.grenadeDlight,
		"extra grenade lights inidicating blast area",
	},
	{ "mortardlight",		"false",			SETTING_BOOL,		(void*)&eth32.settings.mortarDlight,
		"extra mortar lights inidicating blast area",
	},
	{ "disguised", 			"true", 		SETTING_BOOL, 		(void *)&eth32.settings.drawDisguised,
		"draw disguised ESP on players",
	},
	{ "mortartrace",		"false",			SETTING_BOOL,		(void*)&eth32.settings.mortarTrace,
		"show mortar trace lines and impact ESP",
	},
	{ "artymarkers",		"false",			SETTING_BOOL,		(void*)&eth32.settings.artyMarkers,
		"show arty blast area lights and ESP",
	},
	/** *******************************************************************
					VISUAL EXTRA
	******************************************************************* **/
	{ "colorheadhb",		"0 1 0",		SETTING_VEC3,		(void*)eth32.settings.colorHeadHitbox,
		"set the color of the head hitbox",
	},
	{ "colorbodyhb",		"0 1 0",		SETTING_VEC3,		(void*)eth32.settings.colorBodyHitbox,
		"set the color of the body hitbox",
	},
	{ "colorbulletrail",		"1 0 0",		SETTING_VEC3,		(void*)eth32.settings.colorBulletRail,
		"set the color of bullet tracers",
	},
	{ "colorxaxis",			"1 0 0",		SETTING_VEC3,		(void*)eth32.settings.colorXAxis,
		"set the color of hitbox x-axis",
	},
	{ "coloryaxis",			"0 1 0",		SETTING_VEC3,		(void*)eth32.settings.colorYAxis,
		"set the color of hitbox y-axis",
	},
	{ "colorzaxis",			"0 0 1",		SETTING_VEC3,		(void*)eth32.settings.colorZAxis,
		"set the color of hitbox z-axis",
	},	
	{ "xhaircolor",			"0 1 0",		SETTING_VEC3,		(void*)&eth32.settings.xhairColor,
		"set the crosshair color",
	},
	{ "gui_titlecolor",		"1 1 1 1",		SETTING_VEC4,		(void*)&eth32.guiAssets.titleColor,
		"set the gui text title color",
	},
	{ "gui_textcolor1",		"1 1 1 1",		SETTING_VEC4,		(void*)&eth32.guiAssets.textColor1,
		"set the gui text color",
	},
	{ "gui_textcolor2",		"1 1 1 1",		SETTING_VEC4,		(void*)&eth32.guiAssets.textColor2,
		"set the gui text color",
	},
	{ "gui_stamina",		"0 0 1 1",		SETTING_VEC4,		(void*)&eth32.settings.gui_stamina,
		"set the stamina bar color",
	},
	{ "gui_charge",			"1 1 1 1",		SETTING_VEC4,		(void*)&eth32.settings.gui_charge,
		"set the charge bar color",
	},
	{ "gui_overheat",		"1 0 0 1",		SETTING_VEC4,		(void*)&eth32.settings.gui_overheat,
		"set the overheat bar color",
	},
	{ "xhairtype",			"5",			SETTING_INT,		(void*)&eth32.settings.customXhair,
		"set the custom crosshair type",
		XHAIR_OFF, XHAIR_MAX-1,
		{
			{ (int)XHAIR_OFF,			"off" },
			{ (int)XHAIR_SNIPER,		"sniper" },
			{ (int)XHAIR_CROSS, 		"opencross" },
			{ (int)XHAIR_CROSS2, 		"opencross2" },
			{ (int)XHAIR_CROSS3,		"closedcross" },
			{ (int)XHAIR_CROSS4,		"threewaycross" },
			{ (int)XHAIR_DOT,			"dot" },
		},
	},	
	{ "xhairsize",			"50",			SETTING_FLOAT,		(void*)&eth32.settings.crossSize,
		"set the custom crosshair size",
		0, 500,
	},
	{ "xhairopacity",		"1",			SETTING_FLOAT,		(void*)&eth32.settings.xhairOpacity,
		"set the crosshair opacity",
		0, 1,
	},
	/** *******************************************************************
					MISC
	******************************************************************* **/	
	{ "speclist",			"true",			SETTING_BOOL,		(void*)&eth32.settings.getSpeclist,
		 "show who is spectating you",
 	},
	{ "trans_console",		"false",		SETTING_BOOL, 		(void*)&eth32.settings.transparantConsole,
		"make the console transparent so you can see whats going on"
	},
	{ "respawntimers",		"false",			SETTING_BOOL,		(void*)&eth32.settings.respawnTimers,
		"display enemy respawn times",
	},
	{ "autotapout",			"false",		SETTING_BOOL,		(void*)&eth32.settings.autoTapout,
		"when killed, auto-tapout and sends you instantly to the reinforcements queue",
	},
	{ "pbscreenshot", 		"2", 			SETTING_INT, 		(void*)&eth32.settings.pbScreenShot,
		"type of PB screenshot",
  		0, PB_SS_MAX-1,
		{
			{ (int)PB_SS_NORMAL,	"normal" },
			{ (int)PB_SS_CUSTOM,	"custom" },
			{ (int)PB_SS_BLACK,		"black" },
			{ (int)PB_SS_CLEAN,		"clean" },
		},
	},
	{ "origviewvalues",		"false",		SETTING_BOOL,		(void*)&eth32.settings.origViewValues,
		"enable unmodified view calculations",
	},
	{ "interpolatedps",		"true",			SETTING_BOOL,		(void*)&eth32.settings.interpolatedPs,
		"enable interpolated playerstate",
	},
	{ "damagefeedback",		"false",		SETTING_BOOL,		(void*)&eth32.settings.dmgFeedback,
		"enable damage feedback",
	},
	{ "autovote",			"false",		SETTING_BOOL,		(void*)&eth32.settings.autoVote,
		"enable autovoting 'no' when a vote is called",
	},
	{ "antitk",			"false",		SETTING_BOOL,		(void*)&eth32.settings.antiTk,
		"automatically return fire to teamkillers",
	},
	{ "nudgehack",			"false",		SETTING_BOOL,		(void*)&eth32.settings.nudgeHack,
		"unprotects cl_timenudge cvar so it can be used in any server",
	},
	{ "hitsounds",			"0",			SETTING_INT,		(void*)&eth32.settings.hitsounds,
		"set the hitsound effect to be used",
		0, HIT_MAX-2,
		{
			{ (int)HIT_OFF,			"off" },
			{ (int)HIT_HEAD,		"head" },
			{ (int)HIT_HEADSHOT,	"headshot" },
			{ (int)HIT_BODY,		"body" },
		},
	},
	{ "puresounds",			"false",		SETTING_BOOL,		(void*)&eth32.settings.pureSounds,
		"only play pure sounds, this will disable anoying custom voicechats",
	},
	{ "hqsounds", 			"true",			SETTING_BOOL,		(void*)&eth32.settings.hqSounds,
		"play HQ sounds (like 'Dynamite Planted')",
	},
	{ "namesteal", 			"false", 		SETTING_BOOL, 		(void*)&eth32.settings.doNamesteal,
		"Enable namestealing",
	},
	{ "namesteal_delay", 		"700", 			SETTING_INT, 		(void*)&eth32.settings.NamestealDelay,
		"Time to wait between changing names (in ms)",
		0, 20000,
	},
	{ "namesteal_grace", 		"0", 			SETTING_INT, 		(void*)&eth32.settings.NamestealGrace,
		"Time to wait in ms to start stealing after joining a server",
		0, 20000,
	},
	{ "namesteal_mode", 		"0", 			SETTING_INT, 		(void*)&eth32.settings.NamestealMode,
		"Type of namestealing to do",
		0, NAMESTEAL_MAX-1,
		{
			{ (int)NAMESTEAL_TEAM,		"team" },
			{ (int)NAMESTEAL_ENEMY,		"enemy" },
			{ (int)NAMESTEAL_ALL,		"all" },
			{ (int)NAMESTEAL_FILE,		"file" },
		},
	},
	{ "namestealexact", 		"true", 		SETTING_BOOL, 		(void*)&eth32.settings.nsSmartMode,
		"Enable PB proof exact namestealing",
	},
	/** *******************************************************************
					EXTRA
	******************************************************************* **/	
	{ "spoofOs",			"true",			SETTING_BOOL,		(void*)&eth32.settings.etproOs,
		"enable etpro os spoofing\n true = win32, false = linux",
	},
	{ "pk3name",			"eth32v6.pk3",		SETTING_STRING,		(void*)eth32.settings.pk3file,
		"the main eth32 pk3 file name",
	},
	{ "etproGuid",			"",			SETTING_STRING,		(void*)eth32.settings.etproGuid,
		"set your custom etpro GUID",
	},
	{ "jaymac",			"",			SETTING_STRING,		(void*)eth32.settings.jayMac,
		"set your custom jaymod MAC address (prevents bans based on MAC)",
	},
	{ "cvarprefix",			"eth_set",		SETTING_STRING,		(void*)eth32.settings.cvarPrefix,
		"set your custom cvar prefix",
	},	
};
